{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAO,CACXC,OAAQC,SAASC,cAAc,SAC/BC,QAASF,SAASC,cAAc,uBAChCE,OAAQH,SAASC,cAAc,sBAC/BG,SAAUJ,SAASK,eAAe,yBAkCpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAxCbQ,EAAApB,GAASqB,OAAOC,KAAK,CACnBC,QAAS,IACTC,cAAc,IA0ChBtB,EAAKC,OAAOsB,iBAAiB,UAvC7B,SAAkBC,GAChBA,EAAIC,iBAQN,UAA4BC,WAAEA,EAAUC,OAAEA,EAAMC,KAAEA,IAChD,IAAK,IAAIC,EAAW,EAAGA,GAAYF,EAAQE,GAAY,EACrDnB,MAAQoB,OAAOJ,GAAcI,OAAOF,IAASE,OAAOD,GAAY,GAChErB,EAAcqB,EAAUnB,OACrBqB,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACjBQ,EAAApB,GAASqB,OAAOa,QACd,uBAAqBvB,QAAiBC,MAAU,IAGnDuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBQ,EAAApB,GAASqB,OAAOe,QACd,sBAAoBzB,QAAeC,MAAU,G,CAdrDyB,CAJgB,CACdT,WAAY1B,EAAKI,QAAQgC,MACzBR,KAAM5B,EAAKK,OAAO+B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n  delayEl: document.querySelector('input[name=\"delay\"]'),\n  stepEl: document.querySelector('input[name=\"step\"]'),\n  amountEl: document.querySelecstor('input[name=\"amount\"]'),\n};\n\nNotiflix.Notify.init({\n  timeout: 2000,\n  clickToClose: true,\n});\n\nfunction onSubmit(evt) {\n  evt.preventDefault();\n  const options = {\n    delayStart: refs.delayEl.value,\n    step: refs.stepEl.value,\n  };\n  createPromiseStack(options);\n}\n\nfunction createPromiseStack({ delayStart, amount, step }) {\n  for (let position = 1; position <= amount; position += 1) {\n    delay = Number(delayStart) + Number(step) * (Number(position) - 1);\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nrefs.formEl.addEventListener('submit', onSubmit);\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","formEl","document","querySelector","delayEl","stepEl","amountEl","querySelecstor","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$parcel$interopDefault","Notify","init","timeout","clickToClose","addEventListener","evt","preventDefault","delayStart","amount","step","position1","Number","then","success","catch","failure","$47d4ff9957288465$var$createPromiseStack","value"],"version":3,"file":"03-promises.53c09cc5.js.map"}