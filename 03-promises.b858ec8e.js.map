{"mappings":"qhBAGAA,EAHAC,EAAA,UAGSC,OAAOC,KAAK,CACnBC,QAAS,IACTC,cAAc","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\n\nNotiflix.Notify.init({\n  timeout: 2000,\n  clickToClose: true,\n});\n\n// const refs = {\n//   formEl: document.querySelector('.form'),\n//   delayEl: document.querySelector('input[name=\"delay\"]'),\n//   stepEl: document.querySelector('input[name=\"step\"]'),\n//   amountEl: document.querySelecstor('input[name=\"amount\"]'),\n// };\n\n// function onSubmit(evt) {\n//   evt.preventDefault();\n//   const options = {\n//     delayStart: refs.delayEl.value,\n//     step: refs.stepEl.value,\n//   };\n//   createPromiseStack(options);\n// }\n\n// function createPromiseStack({ delayStart, amount, step }) {\n//   for (let position = 1; position <= amount; position += 1) {\n//     delay = Number(delayStart) + Number(step) * (Number(position) - 1);\n//     createPromise(position, delay)\n//       .then(({ position, delay }) => {\n//         Notiflix.Notify.success(\n//           `✅ Fulfilled promise ${position} in ${delay}ms`\n//         );\n//       })\n//       .catch(({ position, delay }) => {\n//         Notiflix.Notify.failure(\n//           `❌ Rejected promise ${position} in ${delay}ms`\n//         );\n//       });\n//   }\n// }\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     const shouldResolve = Math.random() > 0.3;\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n// refs.formEl.addEventListener('submit', onSubmit);\n"],"names":["$parcel$interopDefault","parcelRequire","Notify","init","timeout","clickToClose"],"version":3,"file":"03-promises.b858ec8e.js.map"}